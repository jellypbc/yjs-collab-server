/**
 * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.
 * The document name is attached to the provided url. I.e. the following example
 * creates a websocket connection to http://localhost:1234/my-document-name
 *
 * @example
 *   import * as Y from 'yjs'
 *   import { WebsocketProvider } from 'y-websocket'
 *   const doc = new Y.Doc()
 *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)
 *
 * @extends {Observable<string>}
 */
export class WebsocketProvider extends Observable<string> {
    /**
     * @param {string} serverUrl
     * @param {string} roomname
     * @param {Y.Doc} doc
     * @param {{connect:boolean,awareness:awarenessProtocol.Awareness,db:any|null,params:Object<string,string>}} conf
     */
    constructor(serverUrl: string, roomname: string, doc: Y.Doc, { connect, awareness, db, params }?: any);
    bcChannel: string;
    url: string;
    roomname: string;
    doc: Y.Doc;
    /**
     * @type {Object<string,Object>}
     */
    _localAwarenessState: {
        [x: string]: Object;
    };
    db: any;
    awareness: any;
    wsconnected: boolean;
    wsconnecting: boolean;
    bcconnected: boolean;
    wsUnsuccessfulReconnects: number;
    mux: mutex.mutex;
    /**
     * @type {boolean}
     */
    _synced: boolean;
    /**
     * @type {WebSocket?}
     */
    ws: WebSocket | null;
    wsLastMessageReceived: number;
    /**
     * Whether to connect to other peers or not
     * @type {boolean}
     */
    shouldConnect: boolean;
    /**
     * @param {ArrayBuffer} data
     */
    _bcSubscriber: (data: ArrayBuffer) => void;
    /**
     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)
     * @param {Uint8Array} update
     * @param {any} origin
     */
    _updateHandler: (update: Uint8Array, origin: any) => void;
    /**
     * @param {any} changed
     * @param {any} origin
     */
    _awarenessUpdateHandler: ({ added, updated, removed }: any, origin: any) => void;
    _checkInterval: NodeJS.Timeout;
    set synced(arg: boolean);
    /**
     * @type {boolean}
     */
    get synced(): boolean;
    connectBc(): void;
    disconnectBc(): void;
    disconnect(): void;
    connect(): void;
}
import { Observable } from "lib0/observable";
import * as Y from "yjs";
import * as mutex from "lib0/mutex";
